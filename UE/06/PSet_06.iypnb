{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn import datasets\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Task 1 (Cross Validation)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The Shape of the Data is (1797, 64)\n"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 400x400 with 25 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "digits = datasets.load_digits ()\n",
    "print(f\"The Shape of the Data is {digits.data.shape}\")\n",
    "# Plot the digits to get an overview\n",
    "fig, axes = plt.subplots(5, 5, figsize=(4, 4))\n",
    "# add some space between the plots\n",
    "fig.tight_layout()\n",
    "for i, ax in enumerate(axes.flat):\n",
    "    ax.imshow(digits.images[i], cmap='gray')\n",
    "    ax.set(xticks=[], yticks=[], xlabel=digits.target[i])\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Split the data Set into 5 equally large folds\n",
    "\n",
    "then train 5 models and compute the accuracy\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mean Accuracy: 0.709\n"
     ]
    }
   ],
   "source": [
    "from sklearn.svm import SVC\n",
    "from sklearn.metrics import accuracy_score\n",
    "\n",
    "all_features = digits.data\n",
    "all_targets = digits.target\n",
    "\n",
    "# cut of at 1795\n",
    "features = all_features[:1795].copy()\n",
    "targets = all_targets[:1795].copy()\n",
    "\n",
    "# split into 5 folds\n",
    "features_folds = np.array_split(features, 5)\n",
    "targets_folds = np.array_split(targets, 5)\n",
    "\n",
    "accuracies = []\n",
    "for i in range(5):\n",
    "    X_test = features_folds[i]\n",
    "    y_test = targets_folds[i]\n",
    "    \n",
    "    X_train = []\n",
    "    y_train = []\n",
    "    for j in range(5):\n",
    "        if j == i:\n",
    "            continue\n",
    "        X_train.extend(features_folds[j])\n",
    "        y_train.extend(targets_folds[j])\n",
    "    \n",
    "    X_train = np.array(X_train)\n",
    "    y_train = np.array(y_train)\n",
    "    \n",
    "    model = SVC(kernel='rbf', gamma=0.01)\n",
    "    model.fit(X_train, y_train)\n",
    "    y_pred = model.predict(X_test)\n",
    "    \n",
    "    accuracy = accuracy_score(y_test, y_pred)\n",
    "    accuracies.append(accuracy)\n",
    "    \n",
    "mean_accuracy = np.mean(accuracies)\n",
    "print(f\"Mean Accuracy: {round(mean_accuracy, 3)}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Task 1.2 Use entire dataset\n",
    "\n",
    "- Use train_test_split to split the data into training and testing sets\n",
    "- Use KFold to split training Set into 5 folds\n",
    "- Train 5 models for each gamma in gamma_space\n",
    "- Compute the mean accuracy for each gamma\n",
    "- Select the best gamma and train a final model\n",
    "- Compare the final accuracy with the mean accuracy from the folds\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best Gamma: 0.001 with Mean Accuracy: 0.989\n",
      "Final Accuracy on Test Set: 0.989\n"
     ]
    }
   ],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.model_selection import KFold\n",
    "\n",
    "# Split the data into train and test sets\n",
    "X_train_full, X_test, y_train_full, y_test = train_test_split(digits.data,\n",
    "                                                      digits.target,\n",
    "                                                      test_size=0.2, \n",
    "                                                      random_state=42)\n",
    "# Further split the training set into 5 folds\n",
    "kf = KFold(n_splits=5)\n",
    "gamma_space = np.logspace(-1, -5, 9)\n",
    "best_gamma = None\n",
    "best_accuracy = 0\n",
    "\n",
    "for gamma in gamma_space:\n",
    "    accuracies = []\n",
    "    for train_index, val_index in kf.split(X_train_full):\n",
    "        X_train, X_val = X_train_full[train_index], X_train_full[val_index]\n",
    "        y_train, y_val = y_train_full[train_index], y_train_full[val_index]\n",
    "\n",
    "        model = SVC(kernel='rbf', gamma=gamma)\n",
    "        model.fit(X_train, y_train)\n",
    "        y_pred = model.predict(X_val)\n",
    "        \n",
    "        accuracy = accuracy_score(y_val, y_pred)\n",
    "        accuracies.append(accuracy) \n",
    "        \n",
    "    mean_accuracy = np.mean(accuracies)\n",
    "    if mean_accuracy > best_accuracy:\n",
    "        best_accuracy = mean_accuracy\n",
    "        best_gamma = gamma\n",
    "        \n",
    "print(f\"Best Gamma: {best_gamma} with Mean Accuracy: {round(best_accuracy, 3)}\")\n",
    "\n",
    "final_model = SVC(kernel='rbf', gamma=best_gamma)\n",
    "final_model.fit(X_train_full, y_train_full)\n",
    "\n",
    "final_y_pred = final_model.predict(X_test)\n",
    "final_accuracy = accuracy_score(y_test, final_y_pred)\n",
    "print(f\"Final Accuracy on Test Set: {round(final_accuracy, 3)}\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Task 1.4 Zoom in on the best gamma"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "science",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
